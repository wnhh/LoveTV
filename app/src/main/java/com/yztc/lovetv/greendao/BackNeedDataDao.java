package com.yztc.lovetv.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yztc.lovetv.bean.BackNeedData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BACK_NEED_DATA".
*/
public class BackNeedDataDao extends AbstractDao<BackNeedData, Long> {

    public static final String TABLENAME = "BACK_NEED_DATA";

    /**
     * Properties of entity BackNeedData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property InId = new Property(2, String.class, "inId", false, "IN_ID");
        public final static Property BigImg = new Property(3, String.class, "bigImg", false, "BIG_IMG");
        public final static Property HeadImg = new Property(4, String.class, "headImg", false, "HEAD_IMG");
        public final static Property Username = new Property(5, String.class, "username", false, "USERNAME");
        public final static Property TitleInfo = new Property(6, String.class, "titleInfo", false, "TITLE_INFO");
        public final static Property SwitchBtn = new Property(7, boolean.class, "switchBtn", false, "SWITCH_BTN");
    }


    public BackNeedDataDao(DaoConfig config) {
        super(config);
    }
    
    public BackNeedDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BACK_NEED_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"IN_ID\" TEXT," + // 2: inId
                "\"BIG_IMG\" TEXT," + // 3: bigImg
                "\"HEAD_IMG\" TEXT," + // 4: headImg
                "\"USERNAME\" TEXT," + // 5: username
                "\"TITLE_INFO\" TEXT," + // 6: titleInfo
                "\"SWITCH_BTN\" INTEGER NOT NULL );"); // 7: switchBtn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BACK_NEED_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BackNeedData entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String inId = entity.getInId();
        if (inId != null) {
            stmt.bindString(3, inId);
        }
 
        String bigImg = entity.getBigImg();
        if (bigImg != null) {
            stmt.bindString(4, bigImg);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String titleInfo = entity.getTitleInfo();
        if (titleInfo != null) {
            stmt.bindString(7, titleInfo);
        }
        stmt.bindLong(8, entity.getSwitchBtn() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BackNeedData entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String inId = entity.getInId();
        if (inId != null) {
            stmt.bindString(3, inId);
        }
 
        String bigImg = entity.getBigImg();
        if (bigImg != null) {
            stmt.bindString(4, bigImg);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String titleInfo = entity.getTitleInfo();
        if (titleInfo != null) {
            stmt.bindString(7, titleInfo);
        }
        stmt.bindLong(8, entity.getSwitchBtn() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BackNeedData readEntity(Cursor cursor, int offset) {
        BackNeedData entity = new BackNeedData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // inId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bigImg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headImg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // username
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // titleInfo
            cursor.getShort(offset + 7) != 0 // switchBtn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BackNeedData entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBigImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitleInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSwitchBtn(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BackNeedData entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BackNeedData entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BackNeedData entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
