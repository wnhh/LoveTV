package com.yztc.lovetv.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yztc.lovetv.bean.TabItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAB_ITEM_BEAN".
*/
public class TabItemBeanDao extends AbstractDao<TabItemBean, Long> {

    public static final String TABLENAME = "TAB_ITEM_BEAN";

    /**
     * Properties of entity TabItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property ItemName = new Property(1, String.class, "itemName", false, "ITEM_NAME");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ItemId = new Property(3, int.class, "itemId", false, "ITEM_ID");
        public final static Property BigImg = new Property(4, String.class, "bigImg", false, "BIG_IMG");
        public final static Property IconImg = new Property(5, String.class, "iconImg", false, "ICON_IMG");
        public final static Property ViewCount = new Property(6, String.class, "viewCount", false, "VIEW_COUNT");
        public final static Property Info = new Property(7, String.class, "info", false, "INFO");
    }


    public TabItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TabItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAB_ITEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ITEM_NAME\" TEXT," + // 1: itemName
                "\"NAME\" TEXT," + // 2: name
                "\"ITEM_ID\" INTEGER NOT NULL ," + // 3: itemId
                "\"BIG_IMG\" TEXT," + // 4: bigImg
                "\"ICON_IMG\" TEXT," + // 5: iconImg
                "\"VIEW_COUNT\" TEXT," + // 6: viewCount
                "\"INFO\" TEXT);"); // 7: info
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAB_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TabItemBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(2, itemName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getItemId());
 
        String bigImg = entity.getBigImg();
        if (bigImg != null) {
            stmt.bindString(5, bigImg);
        }
 
        String iconImg = entity.getIconImg();
        if (iconImg != null) {
            stmt.bindString(6, iconImg);
        }
 
        String viewCount = entity.getViewCount();
        if (viewCount != null) {
            stmt.bindString(7, viewCount);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(8, info);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TabItemBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(2, itemName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getItemId());
 
        String bigImg = entity.getBigImg();
        if (bigImg != null) {
            stmt.bindString(5, bigImg);
        }
 
        String iconImg = entity.getIconImg();
        if (iconImg != null) {
            stmt.bindString(6, iconImg);
        }
 
        String viewCount = entity.getViewCount();
        if (viewCount != null) {
            stmt.bindString(7, viewCount);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(8, info);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TabItemBean readEntity(Cursor cursor, int offset) {
        TabItemBean entity = new TabItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itemName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // itemId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bigImg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // iconImg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // viewCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // info
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TabItemBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemId(cursor.getInt(offset + 3));
        entity.setBigImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIconImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setViewCount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TabItemBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TabItemBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TabItemBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
